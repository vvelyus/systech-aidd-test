#!/bin/bash
# ==============================================================================
# Server Readiness Check Script
# ==============================================================================
# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é
# Sprint D2: Manual Deploy
#
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./check-server.sh <ssh_key_path>
#
# –ü—Ä–∏–º–µ—Ä:
#   ./check-server.sh ~/.ssh/id_rsa
# ==============================================================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞
SERVER_IP="89.223.67.136"
SERVER_USER="systech"
SERVER_DIR="/opt/systech/vvelyus"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
    echo ""
    echo "=========================================="
    echo "$1"
    echo "=========================================="
}

print_success() {
    echo -e "${GREEN}‚úì${NC} $1"
}

print_error() {
    echo -e "${RED}‚úó${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}!${NC} $1"
}

print_info() {
    echo "  $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ "$#" -ne 1 ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <ssh_key_path>"
    echo "–ü—Ä–∏–º–µ—Ä: $0 ~/.ssh/id_rsa"
    exit 1
fi

SSH_KEY="$1"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è SSH –∫–ª—é—á–∞
if [ ! -f "$SSH_KEY" ]; then
    print_error "SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $SSH_KEY"
    exit 1
fi

print_header "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"

# ==============================================================================
# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
# ==============================================================================
print_header "1. SSH –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"

if ssh -i "$SSH_KEY" -o ConnectTimeout=5 -o BatchMode=yes "$SERVER_USER@$SERVER_IP" exit 2>/dev/null; then
    print_success "SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ $SERVER_IP —É—Å–ø–µ—à–Ω–æ"
else
    print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ SSH"
    print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:"
    print_info "  - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å SSH –∫–ª—é—á–∞"
    print_info "  - –ü—Ä–∞–≤–∞ –Ω–∞ –∫–ª—é—á (chmod 600 $SSH_KEY)"
    print_info "  - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞"
    exit 1
fi

# ==============================================================================
# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
# ==============================================================================
print_header "2. Docker"

DOCKER_VERSION=$(ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "docker --version 2>/dev/null" || echo "not installed")

if [[ "$DOCKER_VERSION" == *"not installed"* ]]; then
    print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
    exit 1
else
    print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $DOCKER_VERSION"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (20.10)
    VERSION_NUM=$(echo "$DOCKER_VERSION" | grep -oP '\d+\.\d+' | head -1)
    REQUIRED_VERSION="20.10"

    if [ "$(printf '%s\n' "$REQUIRED_VERSION" "$VERSION_NUM" | sort -V | head -n1)" = "$REQUIRED_VERSION" ]; then
        print_success "–í–µ—Ä—Å–∏—è Docker –ø–æ–¥—Ö–æ–¥–∏—Ç (>= $REQUIRED_VERSION)"
    else
        print_warning "–í–µ—Ä—Å–∏—è Docker —É—Å—Ç–∞—Ä–µ–ª–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è >= $REQUIRED_VERSION"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ Docker
if ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "docker ps >/dev/null 2>&1"; then
    print_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ Docker"
else
    print_error "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ Docker"
    print_info "–î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker:"
    print_info "  sudo usermod -aG docker $SERVER_USER"
    exit 1
fi

# ==============================================================================
# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
# ==============================================================================
print_header "3. Docker Compose"

COMPOSE_VERSION=$(ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "docker-compose --version 2>/dev/null" || echo "not installed")

if [[ "$COMPOSE_VERSION" == *"not installed"* ]]; then
    print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
    exit 1
else
    print_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $COMPOSE_VERSION"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (2.0)
    if [[ "$COMPOSE_VERSION" == *"v2."* ]] || [[ "$COMPOSE_VERSION" == *"version 2."* ]]; then
        print_success "–í–µ—Ä—Å–∏—è Docker Compose –ø–æ–¥—Ö–æ–¥–∏—Ç (>= 2.0)"
    else
        print_warning "–í–µ—Ä—Å–∏—è Docker Compose —É—Å—Ç–∞—Ä–µ–ª–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è >= 2.0"
    fi
fi

# ==============================================================================
# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
# ==============================================================================
print_header "4. –ü–æ—Ä—Ç—ã"

check_port() {
    local port=$1
    local service=$2

    if ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "netstat -tuln 2>/dev/null | grep -q :$port" || \
       ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "ss -tuln 2>/dev/null | grep -q :$port"; then
        print_warning "–ü–æ—Ä—Ç $port —É–∂–µ –∑–∞–Ω—è—Ç (–∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å $service)"
        return 1
    else
        print_success "–ü–æ—Ä—Ç $port —Å–≤–æ–±–æ–¥–µ–Ω ($service)"
        return 0
    fi
}

PORTS_OK=true
check_port 8001 "API" || PORTS_OK=false
check_port 3001 "Frontend" || PORTS_OK=false

if [ "$PORTS_OK" = false ]; then
    print_warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã. –í–æ–∑–º–æ–∂–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã."
fi

# ==============================================================================
# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
# ==============================================================================
print_header "5. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"

if ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "[ -d $SERVER_DIR ]"; then
    print_warning "–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $SERVER_DIR"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    if ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "[ -f $SERVER_DIR/docker-compose.prod.yml ]"; then
        print_warning "  - docker-compose.prod.yml —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi

    if ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "[ -f $SERVER_DIR/.env ]"; then
        print_warning "  - .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi

    if ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "[ -d $SERVER_DIR/data ]"; then
        DB_SIZE=$(ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "du -h $SERVER_DIR/data/messages.db 2>/dev/null | cut -f1" || echo "–Ω–µ—Ç")
        print_warning "  - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Ä–∞–∑–º–µ—Ä: $DB_SIZE)"
    fi
else
    print_success "–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "sudo test -w /opt/systech || sudo mkdir -p /opt/systech"; then
    print_success "–ï—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
else
    print_error "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt/systech"
    exit 1
fi

# ==============================================================================
# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ –∏ DNS
# ==============================================================================
print_header "6. –°–µ—Ç—å –∏ DNS"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GitHub Container Registry
if ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "ping -c 1 ghcr.io >/dev/null 2>&1"; then
    print_success "–î–æ—Å—Ç—É–ø –∫ ghcr.io (GitHub Container Registry)"
else
    print_warning "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ ghcr.io —á–µ—Ä–µ–∑ ping (–Ω–æ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ HTTPS)"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS –¥–æ—Å—Ç—É–ø–∞ –∫ GHCR
if ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "curl -s -o /dev/null -w '%{http_code}' https://ghcr.io | grep -q '200\|301\|302'"; then
    print_success "HTTPS –¥–æ—Å—Ç—É–ø –∫ GitHub Container Registry"
else
    print_error "–ù–µ—Ç HTTPS –¥–æ—Å—Ç—É–ø–∞ –∫ GitHub Container Registry"
    print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ firewall –∏ –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
fi

# ==============================================================================
# 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
# ==============================================================================
print_header "7. –†–µ—Å—É—Ä—Å—ã —Å–µ—Ä–≤–µ—Ä–∞"

# –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
DISK_SPACE=$(ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "df -h / | tail -1 | awk '{print \$4}'")
DISK_USAGE=$(ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "df -h / | tail -1 | awk '{print \$5}'")

print_info "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: $DISK_SPACE (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: $DISK_USAGE)"

DISK_USAGE_NUM=${DISK_USAGE%\%}
if [ "$DISK_USAGE_NUM" -lt 80 ]; then
    print_success "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"
elif [ "$DISK_USAGE_NUM" -lt 90 ]; then
    print_warning "–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (< 20%)"
else
    print_error "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"
fi

# –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
MEMORY_INFO=$(ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "free -h | grep Mem | awk '{print \$2\" total, \"\$7\" available\"}'")
print_info "–ü–∞–º—è—Ç—å: $MEMORY_INFO"

# ==============================================================================
# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
# ==============================================================================
print_header "8. Firewall"

if ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "command -v ufw >/dev/null 2>&1"; then
    UFW_STATUS=$(ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "sudo ufw status 2>/dev/null | head -1" || echo "inactive")

    if [[ "$UFW_STATUS" == *"active"* ]]; then
        print_info "UFW –∞–∫—Ç–∏–≤–µ–Ω"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø–æ—Ä—Ç–æ–≤
        if ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "sudo ufw status | grep -q 8001"; then
            print_success "  –ü–æ—Ä—Ç 8001 –æ—Ç–∫—Ä—ã—Ç –≤ UFW"
        else
            print_warning "  –ü–æ—Ä—Ç 8001 –Ω–µ –æ—Ç–∫—Ä—ã—Ç –≤ UFW"
            print_info "    –û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ—Ä—Ç: sudo ufw allow 8001/tcp"
        fi

        if ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "sudo ufw status | grep -q 3001"; then
            print_success "  –ü–æ—Ä—Ç 3001 –æ—Ç–∫—Ä—ã—Ç –≤ UFW"
        else
            print_warning "  –ü–æ—Ä—Ç 3001 –Ω–µ –æ—Ç–∫—Ä—ã—Ç –≤ UFW"
            print_info "    –û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ—Ä—Ç: sudo ufw allow 3001/tcp"
        fi
    else
        print_info "UFW –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
    fi
else
    print_info "UFW –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# ==============================================================================
# –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
# ==============================================================================
print_header "üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞"

print_success "–°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!"
echo ""
print_info "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
print_info "  1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ .env —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏"
print_info "  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ:"
print_info "     ./devops/scripts/deploy.sh $SSH_KEY"
echo ""
print_info "–ò–ª–∏ —Å–ª–µ–¥—É–π—Ç–µ —Ä—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:"
print_info "  docs/guides/MANUAL_DEPLOY.md"
echo ""

exit 0
