#!/bin/bash
# ==============================================================================
# Automated Deployment Script
# ==============================================================================
# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ production —Å–µ—Ä–≤–µ—Ä–µ
# Sprint D2: Manual Deploy
#
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./deploy.sh <ssh_key_path>
#
# –ü—Ä–∏–º–µ—Ä:
#   ./deploy.sh ~/.ssh/id_rsa
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
#   - .env —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
#   - –°–ª–µ–¥—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ docs/guides/MANUAL_DEPLOY.md
# ==============================================================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞
SERVER_IP="89.223.67.136"
SERVER_USER="systech"
SERVER_DIR="/opt/systech/vvelyus"

# –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
LOCAL_COMPOSE="docker-compose.prod.yml"
LOCAL_ENV=".env"
LOCAL_PROMPT="prompts/system_prompt.txt"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
    echo ""
    echo -e "${BLUE}==========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}==========================================${NC}"
}

print_step() {
    echo -e "\n${BLUE}‚Üí${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úì${NC} $1"
}

print_error() {
    echo -e "${RED}‚úó${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}!${NC} $1"
}

print_info() {
    echo "  $1"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
error_exit() {
    print_error "$1"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ "$#" -ne 1 ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <ssh_key_path>"
    echo "–ü—Ä–∏–º–µ—Ä: $0 ~/.ssh/id_rsa"
    exit 1
fi

SSH_KEY="$1"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è SSH –∫–ª—é—á–∞
if [ ! -f "$SSH_KEY" ]; then
    error_exit "SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $SSH_KEY"
fi

print_header "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ SysTech AI Assistant"
echo "–°–µ—Ä–≤–µ—Ä: $SERVER_USER@$SERVER_IP"
echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $SERVER_DIR"

# ==============================================================================
# –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
# ==============================================================================
print_header "–≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"

print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.prod.yml"
if [ ! -f "$LOCAL_COMPOSE" ]; then
    error_exit "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $LOCAL_COMPOSE"
fi
print_success "–ù–∞–π–¥–µ–Ω: $LOCAL_COMPOSE"

print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞"
if [ ! -f "$LOCAL_ENV" ]; then
    error_exit "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $LOCAL_ENV"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if ! grep -q "TELEGRAM_BOT_TOKEN=.*[^_here]$" "$LOCAL_ENV"; then
    print_warning ".env —Å–æ–¥–µ—Ä–∂–∏—Ç placeholder –¥–ª—è TELEGRAM_BOT_TOKEN"
    print_info "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        error_exit "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    fi
fi

if ! grep -q "OPENROUTER_API_KEY=.*[^_here]$" "$LOCAL_ENV"; then
    print_warning ".env —Å–æ–¥–µ—Ä–∂–∏—Ç placeholder –¥–ª—è OPENROUTER_API_KEY"
    print_info "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á!"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        error_exit "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    fi
fi

print_success "–ù–∞–π–¥–µ–Ω: $LOCAL_ENV"

print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ system_prompt.txt"
if [ ! -f "$LOCAL_PROMPT" ]; then
    error_exit "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $LOCAL_PROMPT"
fi
print_success "–ù–∞–π–¥–µ–Ω: $LOCAL_PROMPT"

# ==============================================================================
# –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
# ==============================================================================
print_header "–≠—Ç–∞–ø 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"

print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
if ssh -i "$SSH_KEY" -o ConnectTimeout=10 -o BatchMode=yes "$SERVER_USER@$SERVER_IP" exit 2>/dev/null; then
    print_success "SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"
else
    error_exit "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
fi

print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker"
if ! ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "docker --version >/dev/null 2>&1"; then
    error_exit "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
fi
DOCKER_VERSION=$(ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "docker --version")
print_success "$DOCKER_VERSION"

print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose"
if ! ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "docker-compose --version >/dev/null 2>&1"; then
    error_exit "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
fi
COMPOSE_VERSION=$(ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "docker-compose --version")
print_success "$COMPOSE_VERSION"

# ==============================================================================
# –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
# ==============================================================================
print_header "–≠—Ç–∞–ø 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"

print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "sudo mkdir -p $SERVER_DIR && sudo chown -R \$USER:\$USER $SERVER_DIR"
print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: $SERVER_DIR"

print_step "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "cd $SERVER_DIR && mkdir -p data logs prompts"
print_success "–°–æ–∑–¥–∞–Ω—ã: data/, logs/, prompts/"

# ==============================================================================
# –≠—Ç–∞–ø 4: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
# ==============================================================================
print_header "–≠—Ç–∞–ø 4: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"

print_step "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ docker-compose.prod.yml"
scp -i "$SSH_KEY" "$LOCAL_COMPOSE" "$SERVER_USER@$SERVER_IP:$SERVER_DIR/" >/dev/null 2>&1
print_success "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: docker-compose.prod.yml"

print_step "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .env"
scp -i "$SSH_KEY" "$LOCAL_ENV" "$SERVER_USER@$SERVER_IP:$SERVER_DIR/" >/dev/null 2>&1
ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "chmod 600 $SERVER_DIR/.env"
print_success "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: .env (–ø—Ä–∞–≤–∞: 600)"

print_step "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ system_prompt.txt"
scp -i "$SSH_KEY" "$LOCAL_PROMPT" "$SERVER_USER@$SERVER_IP:$SERVER_DIR/prompts/" >/dev/null 2>&1
print_success "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: prompts/system_prompt.txt"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "ls -lh $SERVER_DIR/" | while read line; do
    print_info "$line"
done

# ==============================================================================
# –≠—Ç–∞–ø 5: –ó–∞–≥—Ä—É–∑–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
# ==============================================================================
print_header "–≠—Ç–∞–ø 5: –ó–∞–≥—Ä—É–∑–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤"

print_step "–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –∏–∑ GHCR"
print_info "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."

ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" << 'EOF'
    docker pull ghcr.io/vvelyus/systech-aidd-test/bot:latest
    docker pull ghcr.io/vvelyus/systech-aidd-test/api:latest
    docker pull ghcr.io/vvelyus/systech-aidd-test/frontend:latest
EOF

print_success "–í—Å–µ –æ–±—Ä–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤"
ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "docker images | grep systech-aidd-test" | while read line; do
    print_info "$line"
done

# ==============================================================================
# –≠—Ç–∞–ø 6: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
# ==============================================================================
print_header "–≠—Ç–∞–ø 6: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"

print_step "–ó–∞–ø—É—Å–∫ Docker Compose"
ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "cd $SERVER_DIR && docker-compose -f docker-compose.prod.yml up -d"
print_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
print_step "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (30 —Å–µ–∫—É–Ω–¥)"
sleep 30

print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "cd $SERVER_DIR && docker-compose -f docker-compose.prod.yml ps"

# ==============================================================================
# –≠—Ç–∞–ø 7: –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# ==============================================================================
print_header "–≠—Ç–∞–ø 7: –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"

print_step "–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π Alembic"
if ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "docker exec systech-aidd-api-prod alembic upgrade head 2>/dev/null"; then
    print_success "–ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
else
    print_warning "–ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã)"
fi

print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
if ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "[ -f $SERVER_DIR/data/messages.db ]"; then
    DB_SIZE=$(ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "du -h $SERVER_DIR/data/messages.db | cut -f1")
    print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ (—Ä–∞–∑–º–µ—Ä: $DB_SIZE)"
else
    print_warning "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
fi

# ==============================================================================
# –≠—Ç–∞–ø 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
# ==============================================================================
print_header "–≠—Ç–∞–ø 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"

print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ API (healthcheck)"
sleep 5  # –î–∞–µ–º API –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
if ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "curl -s http://localhost:8001/health | grep -q healthy"; then
    print_success "API —Ä–∞–±–æ—Ç–∞–µ—Ç: http://$SERVER_IP:8001/health"
else
    print_warning "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–º–æ–∂–µ—Ç –µ—â–µ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è)"
fi

print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend"
if ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "curl -s http://localhost:3001 >/dev/null"; then
    print_success "Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç: http://$SERVER_IP:3001"
else
    print_warning "Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–º–æ–∂–µ—Ç –µ—â–µ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è)"
fi

print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏"
ERROR_COUNT=$(ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_IP" "cd $SERVER_DIR && docker-compose -f docker-compose.prod.yml logs --tail=50 2>&1 | grep -i 'error\|critical' | wc -l")

if [ "$ERROR_COUNT" -eq 0 ]; then
    print_success "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
else
    print_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $ERROR_COUNT –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö"
    print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: ssh $SERVER_USER@$SERVER_IP 'cd $SERVER_DIR && docker-compose -f docker-compose.prod.yml logs'"
fi

# ==============================================================================
# –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
# ==============================================================================
print_header "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"

echo ""
print_info "–î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º:"
echo -e "  ${GREEN}API:${NC}      http://$SERVER_IP:8001"
echo -e "  ${GREEN}Frontend:${NC} http://$SERVER_IP:3001"
echo -e "  ${GREEN}Health:${NC}   http://$SERVER_IP:8001/health"
echo ""

print_info "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏:"
echo "  # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo "  ssh -i $SSH_KEY $SERVER_USER@$SERVER_IP 'cd $SERVER_DIR && docker-compose -f docker-compose.prod.yml logs -f'"
echo ""
echo "  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
echo "  ssh -i $SSH_KEY $SERVER_USER@$SERVER_IP 'cd $SERVER_DIR && docker-compose -f docker-compose.prod.yml restart'"
echo ""
echo "  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞"
echo "  ssh -i $SSH_KEY $SERVER_USER@$SERVER_IP 'cd $SERVER_DIR && docker-compose -f docker-compose.prod.yml down'"
echo ""

print_info "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É Telegram –±–æ—Ç–∞ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)"
echo "  2. –û—Ç–∫—Ä–æ–π—Ç–µ Frontend –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
echo "  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫"
echo "  4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π backup"
echo ""

print_success "–ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: docs/guides/MANUAL_DEPLOY.md"
echo ""

exit 0

