"""Telegram –±–æ—Ç –Ω–∞ –±–∞–∑–µ aiogram."""

import logging
from typing import TYPE_CHECKING, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ChatAction
from aiogram.filters import Command
from aiogram.types import Message

if TYPE_CHECKING:
    from llm_client import LLMClient


class TelegramBot:
    """Telegram –±–æ—Ç –Ω–∞ –±–∞–∑–µ aiogram."""

    def __init__(
        self,
        token: str,
        logger: logging.Logger,
        llm_client: Optional["LLMClient"] = None,
        bot_name: str = "AI Assistant",
    ) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.

        Args:
            token: Telegram Bot API —Ç–æ–∫–µ–Ω
            logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏–π
            llm_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            bot_name: –ò–º—è –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        """
        self.logger = logger
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.llm_client = llm_client
        self.bot_name = bot_name

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()

        if self.llm_client:
            self.logger.info("TelegramBot initialized with LLM support")
        else:
            self.logger.info("TelegramBot initialized without LLM (echo mode)")

    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_help, Command("help"))
        self.dp.message.register(self.cmd_status, Command("status"))
        self.dp.message.register(self.cmd_reset, Command("reset"))
        self.dp.message.register(self.handle_message, F.text)

    async def cmd_start(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not message.from_user:
            return
        user_id = message.from_user.id
        username = message.from_user.username or "user"

        self.logger.info(f"Command /start from user_id={user_id}, username={username}")

        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
            f"–Ø {self.bot_name} ‚Äî AI-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π —á–µ—Ä–µ–∑ LLM –º–æ–¥–µ–ª–∏.\n\n"
            "üéØ –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –û–±—â–µ–Ω–∏–µ –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ\n"
            "‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞\n"
            "‚Ä¢ –ü–æ–º–æ—â—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏\n\n"
            "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
        )

        await message.answer(welcome_text)

    async def cmd_help(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.

        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not message.from_user:
            return
        user_id = message.from_user.id
        self.logger.info(f"Command /help from user_id={user_id}")

        help_text = (
            "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å\n"
            "/reset - –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞\n\n"
            "üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É! "
            "–Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π), "
            "–ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
            "üîÑ –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π /reset"
        )

        await message.answer(help_text)

    async def cmd_status(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status.

        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not message.from_user:
            return
        user_id = message.from_user.id
        self.logger.info(f"Command /status from user_id={user_id}")

        status_text = "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ."

        await message.answer(status_text)

    async def cmd_reset(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset.

        –û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not message.from_user:
            return
        user_id = message.from_user.id
        self.logger.info(f"Command /reset from user_id={user_id}")

        if self.llm_client:
            self.llm_client.reset_context(user_id)
            await message.answer("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")
        else:
            await message.answer("‚ö†Ô∏è LLM –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")

    async def handle_message(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç LLM
        –∏–ª–∏ —ç—Ö–æ-–æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ LLM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.

        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not message.from_user:
            return
        user_id = message.from_user.id
        text = message.text or ""
        text_length = len(text)

        # Edge case: –ø—É—Å—Ç–æ–µ –∏–ª–∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if text_length < 1:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º.")
            return

        # Edge case: –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–æ–ª—å—à–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤)
        if text_length > 4000:
            self.logger.warning(f"Message too long from user_id={user_id}, length={text_length}")
            await message.answer(
                "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–±–æ–ª—å—à–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤). "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return

        text_preview = text[:200]

        self.logger.info(
            f"Message from user_id={user_id}, length={text_length}, text: {text_preview}..."
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        await self.bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)

        try:
            if self.llm_client:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                response = await self.llm_client.get_response_with_context(
                    user_id=user_id, user_message=text
                )
                self.logger.info(f"Sent LLM response to user_id={user_id}")
            else:
                # Fallback –Ω–∞ echo –µ—Å–ª–∏ LLM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                response = f"–≠—Ö–æ: {text}"
                self.logger.info(f"Sent echo response to user_id={user_id}")

            await message.answer(response)

        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            self.logger.error(f"Error processing message: {e}", exc_info=True)
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
            )

    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling."""
        self.logger.info("Starting bot in polling mode...")
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            self.logger.error(f"Bot error: {e}", exc_info=True)
            raise
        finally:
            await self.bot.session.close()
