---
alwaysApply: true
---
# Conventions - Правила разработки для Code Assistant

> Полное техническое видение проекта см. в [VISION.md](../../docs/VISION.md)

## Главные принципы

### KISS - Keep It Simple, Stupid
- Максимальная простота решений
- Никакого оверинжиниринга
- Никаких абстракций "на будущее"

### ООП - Один класс = Один файл
- Строго 1 класс в 1 файле
- Имя файла = имя класса (snake_case для файла, PascalCase для класса)

### Читаемость превыше всего
- Понятные имена переменных и функций
- Минимальная вложенность (максимум 2-3 уровня)
- Код должен быть самоочевидным

---

## Структура кода

### Организация файлов
```
src/
  ├── main.py           # Точка входа
  ├── bot.py            # TelegramBot класс
  ├── llm_client.py     # LLMClient класс
  ├── config.py         # Config класс
  └── logger.py         # Logger настройка
```

### Документация
- Docstrings для всех классов и публичных методов
- Формат: краткое описание + параметры + возвращаемое значение

---

## Технические требования

### Асинхронность
- Весь код асинхронный (async/await)
- Aiogram и OpenAI клиент - асинхронные

### Стек технологий
- Python 3.11+
- aiogram 3.x для Telegram
- openai для работы с OpenRouter API
- python-dotenv для конфигурации

### Конфигурация
- Все настройки через .env файл
- Использовать простой dict для Config
- Валидация с предупреждениями, не падать с ошибкой

### Логирование
- Использовать стандартный модуль logging
- Логировать в файл и консоль
- Уровни: INFO, WARNING, ERROR
- Формат: `%(asctime)s - %(name)s - %(levelname)s - %(message)s`

---

## Стиль кода

### Именование
- Файлы: `snake_case.py`
- Классы: `PascalCase`
- Функции/методы: `snake_case()`
- Константы: `UPPER_SNAKE_CASE`
- Приватные: `_leading_underscore`

### Форматирование
- Линтер: ruff
- Следовать PEP 8

### Обработка ошибок
- Технические ошибки логировать с stack trace
- Пользователю показывать дружественные сообщения
- Не использовать bare except

---

## Что НЕ делать

❌ Создавать абстракции для возможного будущего расширения  
❌ Помещать несколько классов в один файл  
❌ Использовать сложные паттерны проектирования  
❌ Добавлять функционал "на всякий случай"  
❌ Писать синхронный код  
❌ Использовать глобальные переменные  
❌ Игнорировать docstrings

---

## Контрольный чек-лист перед генерацией кода

- [ ] Решение максимально простое?
- [ ] Один класс в файле?
- [ ] Код асинхронный (async/await)?
- [ ] Есть docstrings?
- [ ] Понятные имена переменных?
- [ ] Вложенность не более 2-3 уровней?
- [ ] Есть логирование важных событий?
- [ ] Ошибки обрабатываются корректно?
- [ ] Нет лишнего функционала?

---

> **Помни:** Мы создаем MVP для проверки идеи. Простота > Сложность.

